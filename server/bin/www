#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('strikeorsike:server');
const http = require('http');

const logger = require('../logger/logger');
process.on('uncaughtException', err => {
    logger.error(`(www) crash report: ${err.stack}`);
    process.exit(1);
});

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Create socket server
 */
const io = require('socket.io')(server, {
    cors: {
        origin: ['http://localhost:8080', 'http://localhost:5001'],
        methods: ['GET', 'POST'],
        credentials: true,
    },
    allowEIO3: true
});

/**
 * Listen on socket server
 */
const registerHandlers = require('../routes/socketio/registerHandlers');
io.on('connection', (socket) => registerHandlers(io, socket));

/**
 * Start room service
 */
const roomService = require('../routes/socketio/roomService');
roomService(io);

const logService = require('../logger/logService');
logService();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
